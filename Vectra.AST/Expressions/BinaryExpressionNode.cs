using Vectra.AST.Models;

namespace Vectra.AST.Expressions;

/// <summary>
/// Represents a binary expression node in the abstract syntax tree (AST).
/// </summary>
/// <remarks>
/// This class is used to encapsulate a binary operation along with its left-hand and right-hand
/// operands in the abstract syntax tree.
/// </remarks>
public class BinaryExpressionNode(string op, IExpressionNode left, IExpressionNode right, SourceSpan span) : IExpressionNode
{
    /// Represents the operator in a binary expression node.
    /// This property holds the specific operator used in a binary expression,
    /// such as "+", "-", "*", "/", etc. The operator determines the kind of
    /// operation being performed on the left and right operands.
    /// The value of this property is a string that corresponds to the operator
    /// as it appears in the source code.
    public string Operator { get; } = op;

    /// Gets the left operand of the binary expression.
    /// This property represents the left-hand side of a binary operation,
    /// such as an operand in an addition, subtraction, or other binary operation.
    /// It holds an instance of the `ExpressionNode` class, which represents
    /// an abstract syntax tree (AST) node for an expression.
    /// The left operand can be any valid expression evaluated during the
    /// interpretation or compilation of the AST.
    public IExpressionNode Left { get; } = left;

    /// Gets the right-hand operand of the binary expression.
    /// This property represents the expression appearing to the right of
    /// the operator within a binary operation.
    /// The returned value is an instance of the ExpressionNode class,
    /// which serves as the abstract base for all expression nodes within
    /// the abstract syntax tree (AST).
    /// For example, in a binary expression that represents "3 + 5",
    /// the Right property would refer to the expression node representing "5".
    /// This property is read-only.
    public IExpressionNode Right { get; } = right;

    /// Represents the source span of the binary expression node in the source code.
    /// This property holds the start and end lines and columns that define the range
    /// of the binary expression in the original source. It provides information about the
    /// exact location of the expression to assist with debugging, error reporting, or analysis.
    /// The value of this property is a struct that encapsulates the positional information
    /// for the binary expression.
    public SourceSpan Span { get; } = span;

    /// <summary>
    /// Accepts a visitor that implements the <see cref="IAstVisitor{T}"/> interface, allowing
    /// traversal or processing of this binary expression node in an abstract syntax tree (AST).
    /// </summary>
    /// <typeparam name="T">
    /// The type of the value returned by the visitor's methods.
    /// </typeparam>
    /// <param name="visitor">
    /// The visitor that processes this binary expression node.
    /// </param>
    /// <returns>
    /// A value of type <typeparamref name="T"/> that is generated by the visitor.
    /// </returns>
    public T Accept<T>(IAstVisitor<T> visitor)
    {
        return visitor.VisitBinaryExpression(this);
    }

    public override string ToString()
    {
        return $"BinaryExpressionNode({Left}, {Operator}, {Right})";
    }
}